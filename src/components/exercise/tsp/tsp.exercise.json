{
  "id": "tsp",
  "name": "The Travelling Salesman Problem",
  "description": [
    "The travelling salesman problem (also called the traveling salesperson problem or TSP)",
    "asks the following question: \"Given a list of cities and the distances between each pair",
    "of cities, what is the shortest possible route that visits each city exactly once and returns",
    "to the origin city?\" It is an NP-hard problem in combinatorial optimization, important in theoretical",
    "computer science and operations research."
  ],
  "imgLocation": "https://media.giphy.com/media/fw8uZriJW4TlhmZnUj/giphy.gif",
  "exercise": {
    "className": "TSPProblem",
    "packageName": "com.exercise",
    "methodToCall": "runTSP",
    "iterations": 1000,
    "defaultStarterCode": [
      "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Random;\n\npublic class TSPProblem {\n    private List<List<Integer>> solutions;\n\n    // TODO: DO NOT MODIFY THIS METHOD SIGNATURE\n    public List<Integer> runTSP(double[][] distances, int iterations) {\n\n        Algorithm algorithm = new PlaceHolderAlgorithm(); // change this line only to the algorithm you implemented\n\n        TSPSolution solution = algorithm.run(distances, iterations);\n        solutions = algorithm.getSolutions();\n        return solution.getSolution();\n    }\n\n}\n\n/**\n * The methods your Algorithm should implement\n */\ninterface Algorithm {\n\n    TSPSolution run(double[][] distances, int iterations);\n\n    List<List<Integer>> getSolutions();\n}\n\n// TODO: Replace this with the algorithm of your choice\nclass PlaceHolderAlgorithm implements Algorithm {\n\n    private List<List<Integer>> solutions = new ArrayList<>();\n\n    @Override\n    public TSPSolution run(double[][] distances, int iterations) {\n        return new TSPSolution(10);\n    }\n\n    @Override\n    public List<List<Integer>> getSolutions() {\n        return solutions;\n    }\n}\n\nclass TSPSolution {\n    private final List<Integer> solution;\n\n    public TSPSolution(int length) {\n        this(generateRandomList(length));\n    }\n\n    public TSPSolution(List<Integer> solution) {\n        this.solution = solution;\n    }\n\n    // TODO: IMPLEMENT THIS METHOD\n    public double calculateFitness(double[][] distances) {\n        return -1;\n    }\n\n    // TODO: IMPLEMENT THIS METHOD\n    public void makeSmallChange() {\n\n    }\n\n    public List<Integer> getSolution() {\n        return solution;\n    }\n\n    public TSPSolution copy() {\n        return new TSPSolution(new ArrayList<>(solution));\n    }\n\n    // TODO: IMPLEMENT THIS METHOD\n    private static List<Integer> generateRandomList(int size) {\n        return Collections.emptyList();\n    }\n\n}\n\n//Some useful code that we will probably reuse in later laboratories...\nclass CS2004 {\n    static public double[][] ReadArrayFile(String filename, String sep) {\n        double res[][] = null;\n        try {\n            BufferedReader input = null;\n            input = new BufferedReader(new FileReader(filename));\n            String line = null;\n            int ncol = 0;\n            int nrow = 0;\n\n            while ((line = input.readLine()) != null) {\n                ++nrow;\n                String[] columns = line.split(sep);\n                ncol = Math.max(ncol, columns.length);\n            }\n            res = new double[nrow][ncol];\n            input = new BufferedReader(new FileReader(filename));\n            int i = 0, j = 0;\n            while ((line = input.readLine()) != null) {\n\n                String[] columns = line.split(sep);\n                for (j = 0; j < columns.length; ++j) {\n                    res[i][j] = Double.parseDouble(columns[j]);\n                }\n                ++i;\n            }\n        } catch (Exception E) {\n            System.out.println(\"+++ReadArrayFile: \" + E.getMessage());\n        }\n        return (res);\n    }\n\n    //Shared random object\n    static private Random rand;\n\n    //Create a uniformly distributed random integer between aa and bb inclusive\n    static public int UI(int aa, int bb) {\n        int a = Math.min(aa, bb);\n        int b = Math.max(aa, bb);\n        if (rand == null) {\n            rand = new Random();\n            rand.setSeed(System.nanoTime());\n        }\n        int d = b - a + 1;\n        int x = rand.nextInt(d) + a;\n        return (x);\n    }\n\n    //Create a uniformly distributed random double between a and b inclusive\n    static public double UR(double a, double b) {\n        if (rand == null) {\n            rand = new Random();\n            rand.setSeed(System.nanoTime());\n        }\n        return ((b - a) * rand.nextDouble() + a);\n    }\n}\n"
    ],
    "importsAllowed": [
      "import java.util.List;",
      "import java.util.Random;",
      "import java.util.stream.Collectors;",
      "import java.util.stream.Stream;",
      "import java.util.Collections;",
      "import java.util.ArrayList;"
    ],
    "illegalMethods": [
      "System\\.exit\\(.*\\);"
    ],
    "code": "",
    "endpoint": "/exercise/submit/tsp",
    "demoEndpoint": "/exercise/demo",
    "problem": "tsp"
  }
}